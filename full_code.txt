<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Search Algorithm Visualizer</title>
    <style>
        :root {
            --primary: #2a2a72;
            --secondary: #009ffd;
            --background: linear-gradient(45deg, #0f0c29, #302b63);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', sans-serif;
        }

        body {
            min-height: 100vh;
            background: var(--background);
            color: white;
            padding: 2rem;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .header h1 {
            font-size: 2.5rem;
            background: linear-gradient(to right, #00b4d8, #90e0ef);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 0.5rem;
        }

        .controls {
            background: rgba(255, 255, 255, 0.1);
            padding: 1.5rem;
            border-radius: 15px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            margin-bottom: 2rem;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            width: 100%;
            max-width: 1000px;
        }

        .control-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        select, input, button {
            padding: 0.8rem;
            border: none;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 1rem;
            transition: all 0.3s;
        }

        button {
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        button:hover {
            opacity: 0.9;
            transform: translateY(-2px);
        }

        button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        #array-container {
            height: 400px;
            width: 100%;
            max-width: 1200px;
            display: flex;
            align-items: flex-end;
            gap: 2px;
            margin: 2rem 0;
            padding: 1rem;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 15px;
        }

        .element {
            flex: 1;
            background: linear-gradient(to top, #00b4d8, #90e0ef);
            transition: all 0.3s;
            border-radius: 5px 5px 0 0;
            min-width: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
            position: relative;
        }

        .pointer {
            position: absolute;
            bottom: calc(100% + 10px);
            left: 50%;
            transform: translateX(-50%);
            color: #ff4757;
            font-size: 1.2rem;
            font-weight: bold;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .complexity {
            background: rgba(255, 255, 255, 0.1);
            padding: 1.5rem;
            border-radius: 15px;
            width: 100%;
            max-width: 1000px;
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
        }

        .complexity-box {
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            padding: 1rem;
            border-radius: 10px;
            text-align: center;
        }

        .complexity-box h3 {
            margin-bottom: 0.5rem;
            color: #90e0ef;
        }

        @media (max-width: 768px) {
            .controls, .complexity {
                grid-template-columns: 1fr;
            }
        }

        .highlight {
            animation: pulse 1s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Search Algorithm Visualizer</h1>
        <p>Visualize Searching Algorithms with Real-time Operations</p>
    </div>

    <div class="controls">
        <div class="control-group">
            <label>Algorithm</label>
            <select id="algorithm" onchange="updateComplexity()">
                <option value="linear">Linear Search</option>
                <option value="binary">Binary Search</option>
                <option value="jump">Jump Search</option>
                <option value="exponential">Exponential Search</option>
            </select>
        </div>

        <div class="control-group">
            <label>Search Value</label>
            <input type="number" id="searchValue" placeholder="Enter value">
        </div>

        <div class="control-group">
            <label>Speed</label>
            <input type="range" id="speed" min="50" max="1000" value="300">
        </div>

        <button onclick="generateNewArray()">
            🔄 New Array
        </button>

        <button onclick="startSearch()">
            🚀 Start Search
        </button>
    </div>

    <div id="array-container"></div>

    <div class="complexity">
        <div class="complexity-box">
            <h3>Time Complexity</h3>
            <span id="timeComplexity">O(n)</span>
        </div>
        <div class="complexity-box">
            <h3>Space Complexity</h3>
            <span id="spaceComplexity">O(1)</span>
        </div>
    </div>

    <script>
        let array = [];
        let isSearching = false;
        const container = document.getElementById('array-container');
        const speedControl = document.getElementById('speed');
        
        const complexity = {
            linear: { time: 'O(n)', space: 'O(1)' },
            binary: { time: 'O(log n)', space: 'O(1)' },
            jump: { time: 'O(√n)', space: 'O(1)' },
            exponential: { time: 'O(log n)', space: 'O(1)' }
        };

        // Initialize
        generateNewArray();
        updateComplexity();

        function updateComplexity() {
            const algo = document.getElementById('algorithm').value;
            document.getElementById('timeComplexity').textContent = complexity[algo].time;
            document.getElementById('spaceComplexity').textContent = complexity[algo].space;
        }

        function generateNewArray() {
            array = Array.from({length: 20}, () => Math.floor(Math.random() * 90) + 10);
            array.sort((a, b) => a - b);
            renderArray();
        }

        function renderArray() {
            container.innerHTML = '';
            array.forEach((value, index) => {
                const element = document.createElement('div');
                element.className = 'element';
                element.style.height = `${value * 3}px`;
                element.textContent = value;
                
                const pointer = document.createElement('div');
                pointer.className = 'pointer';
                pointer.textContent = '↑';
                element.appendChild(pointer);
                
                container.appendChild(element);
            });
        }

        async function startSearch() {
            if(isSearching) return;
            isSearching = true;
            
            const value = parseInt(document.getElementById('searchValue').value);
            const algorithm = document.getElementById('algorithm').value;
            
            if(isNaN(value)) {
                alert('Please enter a valid number');
                isSearching = false;
                return;
            }

            resetArray();

            let found = false;
            switch(algorithm) {
                case 'linear':
                    found = await linearSearch(value);
                    break;
                case 'binary':
                    found = await binarySearch(value);
                    break;
                case 'jump':
                    found = await jumpSearch(value);
                    break;
                case 'exponential':
                    found = await exponentialSearch(value);
                    break;
            }

            showResult(found, value);
            isSearching = false;
        }

        // Linear Search
        async function linearSearch(target) {
            for(let i = 0; i < array.length; i++) {
                highlightElement(i, '#ff4757');
                await sleep(speedControl.max - speedControl.value + 50);
                
                if(array[i] === target) {
                    highlightElement(i, '#2ed573');
                    return true;
                }
                resetElement(i);
            }
            return false;
        }

        // Binary Search
        async function binarySearch(target) {
            let left = 0;
            let right = array.length - 1;

            while(left <= right) {
                const mid = Math.floor((left + right) / 2);
                
                highlightElement(mid, '#ff4757');
                highlightPointer(left, 'L', '#3498db');
                highlightPointer(right, 'R', '#e74c3c');
                await sleep(speedControl.max - speedControl.value + 50);

                if(array[mid] === target) {
                    highlightElement(mid, '#2ed573');
                    return true;
                } else if(array[mid] < target) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
                
                resetElement(mid);
            }
            return false;
        }

        // Jump Search
        async function jumpSearch(target) {
            const step = Math.floor(Math.sqrt(array.length));
            let prev = 0;

            while(array[Math.min(step, array.length)-1] < target) {
                prev = step;
                await highlightJump(prev);
                if(prev >= array.length) return false;
            }

            while(array[prev] < target) {
                prev++;
                highlightElement(prev, '#ff4757');
                await sleep(speedControl.max - speedControl.value + 50);
                if(prev === Math.min(step, array.length)) return false;
            }

            if(array[prev] === target) {
                highlightElement(prev, '#2ed573');
                return true;
            }
            return false;
        }

        // Exponential Search
        async function exponentialSearch(target) {
            if(array[0] === target) {
                highlightElement(0, '#2ed573');
                return true;
            }

            let i = 1;
            while(i < array.length && array[i] <= target) {
                highlightElement(i, '#ff4757');
                await sleep(speedControl.max - speedControl.value + 50);
                resetElement(i);
                i *= 2;
            }

            return await binarySearch(target, Math.floor(i/2), Math.min(i, array.length));
        }

        // Helper Functions
        function highlightElement(index, color) {
            const element = container.children[index];
            element.style.background = color;
            element.querySelector('.pointer').style.opacity = '1';
        }

        function resetElement(index) {
            const element = container.children[index];
            element.style.background = 'linear-gradient(to top, #00b4d8, #90e0ef)';
            element.querySelector('.pointer').style.opacity = '0';
        }

        function highlightPointer(index, text, color) {
            const pointer = container.children[index].querySelector('.pointer');
            pointer.textContent = text;
            pointer.style.color = color;
            pointer.style.opacity = '1';
        }

        function resetArray() {
            document.querySelectorAll('.element').forEach(el => {
                el.style.background = 'linear-gradient(to top, #00b4d8, #90e0ef)';
                el.querySelector('.pointer').style.opacity = '0';
            });
        }

        async function highlightJump(end) {
            for(let i = 0; i <= end; i++) {
                highlightElement(i, '#f1c40f');
                await sleep(50);
                resetElement(i);
            }
        }

        function showResult(found, value) {
            const status = document.querySelector('.header p');
            status.textContent = found ? 
                `✅ Value ${value} Found!` : 
                `❌ Value ${value} Not Found!`;
            status.classList.add('highlight');
            setTimeout(() => status.classList.remove('highlight'), 1000);
        }

        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
    </script>
</body>
</html>



<!DOCTYPE html>
<html>
<head>
    <title>Sorting Algorithm Visualizer</title>
    <style>
        :root {
            --primary: #2a2a72;
            --secondary: #009ffd;
            --background: linear-gradient(45deg, #0f0c29, #302b63);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', sans-serif;
        }

        body {
            min-height: 100vh;
            background: var(--background);
            color: white;
            padding: 2rem;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .header h1 {
            font-size: 2.5rem;
            background: linear-gradient(to right, #00b4d8, #90e0ef);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 0.5rem;
        }

        .controls {
            background: rgba(255, 255, 255, 0.1);
            padding: 1.5rem;
            border-radius: 15px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            margin-bottom: 2rem;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            width: 100%;
            max-width: 1000px;
        }

        .control-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        select, input, button {
            padding: 0.8rem;
            border: none;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 1rem;
            transition: all 0.3s;
        }

        button {
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        #array-container {
            height: 400px;
            width: 100%;
            max-width: 1200px;
            display: flex;
            align-items: flex-end;
            gap: 2px;
            margin: 2rem 0;
            padding: 1rem;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 15px;
        }

        .bar {
            flex: 1;
            background: linear-gradient(to top, #00b4d8, #90e0ef);
            transition: all 0.3s;
            border-radius: 5px 5px 0 0;
            min-width: 30px;
            position: relative;
        }

        .complexity {
            background: rgba(255, 255, 255, 0.1);
            padding: 1.5rem;
            border-radius: 15px;
            width: 100%;
            max-width: 1000px;
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
        }

        .complexity-box {
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            padding: 1rem;
            border-radius: 10px;
            text-align: center;
        }

        .code-box {
            background: #1e1e1e;
            padding: 1rem;
            border-radius: 8px;
            margin-top: 2rem;
            width: 100%;
            max-width: 1000px;
        }

        .highlight {
            background: #ff4757 !important;
        }

        .swap {
            background: #2ed573 !important;
        }

        @keyframes swapAnimation {
            0% { transform: translateY(0); }
            50% { transform: translateY(-20px); }
            100% { transform: translateY(0); }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Sorting Algorithm Visualizer</h1>
        <p>Visualize Sorting Algorithms with Real-time Operations</p>
    </div>

    <div class="controls">
        <div class="control-group">
            <label>Algorithm</label>
            <select id="algorithm" onchange="updateComplexity()">
                <option value="bubble">Bubble Sort</option>
                <option value="quick">Quick Sort</option>
                <option value="merge">Merge Sort</option>
                <option value="selection">Selection Sort</option>
            </select>
        </div>

        <div class="control-group">
            <label>Array Size</label>
            <input type="range" id="size" min="10" max="100" value="30">
        </div>

        <div class="control-group">
            <label>Speed</label>
            <input type="range" id="speed" min="50" max="1000" value="300">
        </div>

        <button onclick="generateNewArray()">
            🔄 New Array
        </button>

        <button onclick="startSorting()" id="sortBtn">
            🚀 Start Sorting
        </button>
    </div>

    <div id="array-container"></div>

    <div class="complexity">
        <div class="complexity-box">
            <h3>Time Complexity</h3>
            <span id="timeComplexity">O(n²)</span>
        </div>
        <div class="complexity-box">
            <h3>Space Complexity</h3>
            <span id="spaceComplexity">O(1)</span>
        </div>
    </div>

    <div class="code-box">
        <pre id="algorithmCode">// Select algorithm to view code</pre>
        <button onclick="copyCode()">📋 Copy Code</button>
    </div>

    <script>
        let array = [];
        let isSorting = false;
        const container = document.getElementById('array-container');
        const speedControl = document.getElementById('speed');
        
        const complexity = {
            bubble: { time: 'O(n²)', space: 'O(1)' },
            quick: { time: 'O(n log n)', space: 'O(log n)' },
            merge: { time: 'O(n log n)', space: 'O(n)' },
            selection: { time: 'O(n²)', space: 'O(1)' }
        };

        const algorithmCodes = {
            bubble: `function bubbleSort(arr) {
    for(let i=0; i<arr.length; i++) {
        for(let j=0; j<arr.length-i-1; j++) {
            if(arr[j] > arr[j+1]) {
                [arr[j], arr[j+1]] = [arr[j+1], arr[j]];
            }
        }
    }
}`,
            quick: `function quickSort(arr, low=0, high=arr.length-1) {
    if(low < high) {
        const pi = partition(arr, low, high);
        quickSort(arr, low, pi-1);
        quickSort(arr, pi+1, high);
    }
}`,
            merge: `function mergeSort(arr) {
    if(arr.length <= 1) return arr;
    const mid = Math.floor(arr.length/2);
    return merge(
        mergeSort(arr.slice(0, mid)),
        mergeSort(arr.slice(mid))
    );
}`,
            selection: `function selectionSort(arr) {
    for(let i=0; i<arr.length; i++) {
        let min = i;
        for(let j=i+1; j<arr.length; j++) {
            if(arr[j] < arr[min]) min = j;
        }
        [arr[i], arr[min]] = [arr[min], arr[i]];
    }
}`
        };

        function updateComplexity() {
            const algo = document.getElementById('algorithm').value;
            document.getElementById('timeComplexity').textContent = complexity[algo].time;
            document.getElementById('spaceComplexity').textContent = complexity[algo].space;
            document.getElementById('algorithmCode').textContent = algorithmCodes[algo];
        }

        function generateNewArray() {
            const size = document.getElementById('size').value;
            array = Array.from({length: size}, () => Math.floor(Math.random() * 90) + 10);
            renderArray();
        }

        function renderArray() {
            container.innerHTML = '';
            array.forEach(value => {
                const bar = document.createElement('div');
                bar.className = 'bar';
                bar.style.height = `${value * 3}px`;
                container.appendChild(bar);
            });
        }

        async function startSorting() {
            if(isSorting) return;
            isSorting = true;
            
            const algorithm = document.getElementById('algorithm').value;
            const bars = container.children;
            
            switch(algorithm) {
                case 'bubble':
                    await bubbleSort(bars);
                    break;
                case 'quick':
                    await quickSort(bars);
                    break;
                case 'merge':
                    await mergeSort(bars);
                    break;
                case 'selection':
                    await selectionSort(bars);
                    break;
            }

            isSorting = false;
        }

        // Sorting Algorithms
        async function bubbleSort(bars) {
            for(let i=0; i<array.length; i++) {
                for(let j=0; j<array.length-i-1; j++) {
                    bars[j].classList.add('highlight');
                    bars[j+1].classList.add('highlight');
                    await sleep(speedControl.max - speedControl.value + 50);
                    
                    if(array[j] > array[j+1]) {
                        [array[j], array[j+1]] = [array[j+1], array[j]];
                        bars[j].style.height = `${array[j] * 3}px`;
                        bars[j+1].style.height = `${array[j+1] * 3}px`;
                        bars[j].classList.add('swap');
                        bars[j+1].classList.add('swap');
                        await sleep(100);
                    }
                    
                    bars[j].classList.remove('highlight', 'swap');
                    bars[j+1].classList.remove('highlight', 'swap');
                }
            }
        }

        async function quickSort(bars, low=0, high=array.length-1) {
            if(low < high) {
                const pi = await partition(bars, low, high);
                await quickSort(bars, low, pi-1);
                await quickSort(bars, pi+1, high);
            }
        }

        async function partition(bars, low, high) {
            const pivot = array[high];
            let i = low - 1;
            
            bars[high].classList.add('highlight');
            for(let j=low; j<high; j++) {
                bars[j].classList.add('highlight');
                await sleep(speedControl.max - speedControl.value + 50);
                
                if(array[j] < pivot) {
                    i++;
                    [array[i], array[j]] = [array[j], array[i]];
                    bars[i].style.height = `${array[i] * 3}px`;
                    bars[j].style.height = `${array[j] * 3}px`;
                    await sleep(100);
                }
                
                bars[j].classList.remove('highlight');
            }
            
            [array[i+1], array[high]] = [array[high], array[i+1]];
            bars[i+1].style.height = `${array[i+1] * 3}px`;
            bars[high].style.height = `${array[high] * 3}px`;
            bars[high].classList.remove('highlight');
            
            return i+1;
        }

        // Other sorting algorithms implementations...

        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }

        function copyCode() {
            navigator.clipboard.writeText(document.getElementById('algorithmCode').textContent);
            alert('Code copied to clipboard!');
        }

        // Initialize
        generateNewArray();
        updateComplexity();
    </script>
</body>
</html>
